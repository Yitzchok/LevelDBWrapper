/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace LevelDBWrapper.Native {

using System;
using System.Runtime.InteropServices;

class LeveldbPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("leveldb_managed", EntryPoint="SWIGRegisterExceptionCallbacks_Leveldb")]
    public static extern void SWIGRegisterExceptionCallbacks_Leveldb(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("leveldb_managed", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_Leveldb")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_Leveldb(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_Leveldb(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_Leveldb(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(LeveldbPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(LeveldbPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("leveldb_managed", EntryPoint="SWIGRegisterStringCallback_Leveldb")]
    public static extern void SWIGRegisterStringCallback_Leveldb(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_Leveldb(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  [DllImport("leveldb_managed", EntryPoint="CSharp_new_WriteOptions")]
  public static extern IntPtr new_WriteOptions();

  [DllImport("leveldb_managed", EntryPoint="CSharp_WriteOptions_Sync_set")]
  public static extern void WriteOptions_Sync_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_WriteOptions_Sync_get")]
  public static extern bool WriteOptions_Sync_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_WriteOptions")]
  public static extern void delete_WriteOptions(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Status_IsReady")]
  public static extern bool Status_IsReady(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Status_IsNotFound")]
  public static extern bool Status_IsNotFound(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Status_ToString")]
  public static extern string Status_ToString(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_Status")]
  public static extern IntPtr new_Status();

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_Status")]
  public static extern void delete_Status(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_Options")]
  public static extern IntPtr new_Options();

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_CreateIfMissing_set")]
  public static extern void Options_CreateIfMissing_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_CreateIfMissing_get")]
  public static extern bool Options_CreateIfMissing_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_ErrorIfExists_set")]
  public static extern void Options_ErrorIfExists_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_ErrorIfExists_get")]
  public static extern bool Options_ErrorIfExists_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_ParanoidChecks_set")]
  public static extern void Options_ParanoidChecks_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_ParanoidChecks_get")]
  public static extern bool Options_ParanoidChecks_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_WriteBufferSize_set")]
  public static extern void Options_WriteBufferSize_set(HandleRef jarg1, uint jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_WriteBufferSize_get")]
  public static extern uint Options_WriteBufferSize_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_MaxOpenFiles_set")]
  public static extern void Options_MaxOpenFiles_set(HandleRef jarg1, int jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_MaxOpenFiles_get")]
  public static extern int Options_MaxOpenFiles_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_BlockSize_set")]
  public static extern void Options_BlockSize_set(HandleRef jarg1, uint jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_BlockSize_get")]
  public static extern uint Options_BlockSize_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_BlockRestartInterval_set")]
  public static extern void Options_BlockRestartInterval_set(HandleRef jarg1, int jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_BlockRestartInterval_get")]
  public static extern int Options_BlockRestartInterval_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_Compression_set")]
  public static extern void Options_Compression_set(HandleRef jarg1, int jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_Options_Compression_get")]
  public static extern int Options_Compression_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_Options")]
  public static extern void delete_Options(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_VerifyChecksums_set")]
  public static extern void ReadOptions_VerifyChecksums_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_VerifyChecksums_get")]
  public static extern bool ReadOptions_VerifyChecksums_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_FillCache_set")]
  public static extern void ReadOptions_FillCache_set(HandleRef jarg1, bool jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_FillCache_get")]
  public static extern bool ReadOptions_FillCache_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_snapshot_set")]
  public static extern void ReadOptions_snapshot_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_ReadOptions_snapshot_get")]
  public static extern IntPtr ReadOptions_snapshot_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_ReadOptions")]
  public static extern IntPtr new_ReadOptions();

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_ReadOptions")]
  public static extern void delete_ReadOptions(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DestroyDB")]
  public static extern IntPtr DestroyDB(string jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_RepairDB")]
  public static extern IntPtr RepairDB(string jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBWriteBatch_Put")]
  public static extern void DBWriteBatch_Put(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBWriteBatch_Delete")]
  public static extern void DBWriteBatch_Delete(HandleRef jarg1, string jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBWriteBatch_Clear")]
  public static extern void DBWriteBatch_Clear(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_DBWriteBatch")]
  public static extern IntPtr new_DBWriteBatch();

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_DBWriteBatch")]
  public static extern void delete_DBWriteBatch(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_DBIterator")]
  public static extern void delete_DBIterator(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_valid")]
  public static extern bool DBIterator_valid(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_seekToFirst")]
  public static extern void DBIterator_seekToFirst(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_seekToLast")]
  public static extern void DBIterator_seekToLast(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_seek")]
  public static extern void DBIterator_seek(HandleRef jarg1, string jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_next")]
  public static extern void DBIterator_next(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_prev")]
  public static extern void DBIterator_prev(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_key")]
  public static extern string DBIterator_key(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_value")]
  public static extern string DBIterator_value(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBIterator_status")]
  public static extern IntPtr DBIterator_status(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTable_open")]
  public static extern IntPtr DBTable_open(HandleRef jarg1, string jarg2, long jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_DBTable")]
  public static extern void delete_DBTable(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTable_newIterator")]
  public static extern IntPtr DBTable_newIterator(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_DBTableBuilder")]
  public static extern IntPtr new_DBTableBuilder(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_DBTableBuilder")]
  public static extern void delete_DBTableBuilder(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_setOptions")]
  public static extern IntPtr DBTableBuilder_setOptions(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_getStatus")]
  public static extern IntPtr DBTableBuilder_getStatus(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_open")]
  public static extern IntPtr DBTableBuilder_open(HandleRef jarg1, string jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_add")]
  public static extern IntPtr DBTableBuilder_add(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_flush")]
  public static extern void DBTableBuilder_flush(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_numEntries")]
  public static extern long DBTableBuilder_numEntries(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_fileSize")]
  public static extern long DBTableBuilder_fileSize(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_finish")]
  public static extern IntPtr DBTableBuilder_finish(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBTableBuilder_abandon")]
  public static extern void DBTableBuilder_abandon(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_lastStatus_set")]
  public static extern void DBAccessor_lastStatus_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_lastStatus_get")]
  public static extern IntPtr DBAccessor_lastStatus_get(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_open")]
  public static extern IntPtr DBAccessor_open(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_get")]
  public static extern string DBAccessor_get(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_write")]
  public static extern IntPtr DBAccessor_write(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_put")]
  public static extern IntPtr DBAccessor_put(HandleRef jarg1, HandleRef jarg2, string jarg3, string jarg4);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_remove")]
  public static extern IntPtr DBAccessor_remove(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_newIterator")]
  public static extern IntPtr DBAccessor_newIterator(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_getSnapshot")]
  public static extern IntPtr DBAccessor_getSnapshot(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_releaseSnapshot")]
  public static extern void DBAccessor_releaseSnapshot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_DBAccessor_getProperty")]
  public static extern string DBAccessor_getProperty(HandleRef jarg1, string jarg2);

  [DllImport("leveldb_managed", EntryPoint="CSharp_new_DBAccessor")]
  public static extern IntPtr new_DBAccessor();

  [DllImport("leveldb_managed", EntryPoint="CSharp_delete_DBAccessor")]
  public static extern void delete_DBAccessor(HandleRef jarg1);

  [DllImport("leveldb_managed", EntryPoint="CSharp_getSnapshotValue")]
  public static extern IntPtr getSnapshotValue(HandleRef jarg1);
}

}
