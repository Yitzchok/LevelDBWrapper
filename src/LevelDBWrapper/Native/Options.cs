/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Native
{

    using System;
    using System.Runtime.InteropServices;

    public class Options : IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Options(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(Options obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
        }

        ~Options()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        LeveldbPINVOKE.delete_Options(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public Options()
            : this(LeveldbPINVOKE.new_Options(), true)
        {
        }

        public bool createIfMissing
        {
            set
            {
                LeveldbPINVOKE.Options_createIfMissing_set(swigCPtr, value);
            }
            get
            {
                bool ret = LeveldbPINVOKE.Options_createIfMissing_get(swigCPtr);
                return ret;
            }
        }

        public bool errorIfExists
        {
            set
            {
                LeveldbPINVOKE.Options_errorIfExists_set(swigCPtr, value);
            }
            get
            {
                bool ret = LeveldbPINVOKE.Options_errorIfExists_get(swigCPtr);
                return ret;
            }
        }

        public bool paranoidChecks
        {
            set
            {
                LeveldbPINVOKE.Options_paranoidChecks_set(swigCPtr, value);
            }
            get
            {
                bool ret = LeveldbPINVOKE.Options_paranoidChecks_get(swigCPtr);
                return ret;
            }
        }

        public uint writeBufferSize
        {
            set
            {
                LeveldbPINVOKE.Options_writeBufferSize_set(swigCPtr, value);
            }
            get
            {
                uint ret = LeveldbPINVOKE.Options_writeBufferSize_get(swigCPtr);
                return ret;
            }
        }

        public int maxOpenFiles
        {
            set
            {
                LeveldbPINVOKE.Options_maxOpenFiles_set(swigCPtr, value);
            }
            get
            {
                int ret = LeveldbPINVOKE.Options_maxOpenFiles_get(swigCPtr);
                return ret;
            }
        }

        public uint blockSize
        {
            set
            {
                LeveldbPINVOKE.Options_blockSize_set(swigCPtr, value);
            }
            get
            {
                uint ret = LeveldbPINVOKE.Options_blockSize_get(swigCPtr);
                return ret;
            }
        }

        public int blockRestartInterval
        {
            set
            {
                LeveldbPINVOKE.Options_blockRestartInterval_set(swigCPtr, value);
            }
            get
            {
                int ret = LeveldbPINVOKE.Options_blockRestartInterval_get(swigCPtr);
                return ret;
            }
        }

        public CompressionType compression
        {
            set
            {
                LeveldbPINVOKE.Options_compression_set(swigCPtr, (int)value);
            }
            get
            {
                CompressionType ret = (CompressionType)LeveldbPINVOKE.Options_compression_get(swigCPtr);
                return ret;
            }
        }

    }

}
